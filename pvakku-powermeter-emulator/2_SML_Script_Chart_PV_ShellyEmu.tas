>D 250
; IP for external ScriptEditor
IP=192.168.178.31


; (1) Beschreibung:
; Skript Version ganz unten
; Tasmota SML Skript mit Google Chart (Diagramme)
; Diese Variante des Scriptes beinhaltet die Emulation vom Shelly Pro 3EM damit die Nulleinspeisung mit einem Marstek Akku realisiert werden kann (dieses Script ist nur für den ESP32!)
; Wenn ihr einen Jupiter oder Venus Akku habt, sollte der Marstek Akku den Emulator bereits finden. Beim B2500 Akku müsst ihr ggf. noch den Port anpassen, sucht hier nach "udp(0 1010)" und ändert 1010 -> 2220.
; Dann müsst ihr natürlich noch die SML Sektion (>M) auf euren Zähler anpassen, die Reihenfolge muss eingehalten werden! Habt ihr einen Zähler, der die Leistung/Ströme aller 3 Phasen einzeln ausgeben kann
; dann könnt ihr das Script dafür anpassen. Sucht nach "cpwr=sml[1]". Dort könnt ihr die ; entfernen um alle 3 Phasen korrekt an den Akku zu senden. Der Akku kann dann nämlich erkennen, an welcher Phase er hängt.
; Gibt euer Zähler nur die Ströme (und ggf. Spannungen) für L1-3 aus, dann müsst ihr die Leistung im Script für die einzelnen Phasen berechnen (U*I+cosPhi) oder ihr verwendet nur die Gesamtleistung, was zu empfehlen ist.
; Anleitung https://ottelo.jimdofree.com/stromz%C3%A4hler-auslesen-tasmota/#13a Forum www.photovoltaikforum.com/thread/250523-marstek-venus-jupiter-b2500-shelly-pro-3em-emulator-tasmota-lesekopf
; 2 Liniendiagramme: Leistung der letzten 4 Stunden (fein aufgelöst) und Leistung der letzten 24h (grob aufgelöst)
; Das 4h Diagramm wird nicht gespeichert und ist nach jedem Neustart neu befüllt
; Tabellen mit Anzeige des Netzbezugs bzw. Netzeinspeisung (bei PV) pro Tag und pro Monat
; Tasmota muss mit dem Internet verbunden sein um die aktuelle Uhrzeit via NTP zu erhalten. Ansonsten muss das Skript angepasst werden.
; Optional im Skript enthalten: (Op1) Schalte zweiten ESP (z.B. Poolpumpe) bei Netzeinspeisung (Op2) Daten an www.clever-pv.com senden. Zum Aktivieren nach (OpX) suchen und inkl ; entfernen.

; (2) Anleitung:
; http://ottelo.jimdo.de/
; (a) Skript an euren Zähler anpassen:
; ganz unten >M Sektion anpassen
; https://tasmota.github.io/docs/Smart-Meter-Interface/
; (b) Script übertragen
; Ich empfehle das Script mit dem ext. Editor zu "komprimieren" (Kommentare entfernen). Script laden -> Window -> Export to documents folder. Dann einfach in Tasmota einfügen.
; ScriptEditor runterladen um dieses Skript auf den ESP zu übertragen. Der Editor entfernt alle Kommentare und leere Zeilen
; https://tasmota.github.io/docs/Scripting-Language/#optional-external-editor
; IP eures ESPs oben im Script eingeben, damit der Editor das Skript korrekt senden kann
; Hinweis Dateiformat Scriptdatei: UTF8, LF (\n) als Zeilenende (Unix EOL), damit der ext. Editor keine doppelten Leerzeichen anzeigt. Einstellbar in Notepad++ (Edit->EOL->Unix).
; (c) Initialisieren
; Wenn die Werte vom Stromzähler korrekt angezeigt werden, muss das Script einmalig initialisiert werden. Folgendes in die Tasmota Console eingeben - Achtung alle Daten im Diagramm/Tabelle werden gelöscht!
; script>=#init
; Zählerstand beim Jahreswechsel: Falls ihr den Jahresverbrauch für das aktuelle Jahr korrekt anzeigen wollt, könnt ihr den Zählerstand (kWh) vom 1.1. via Console nachträglich setzen (danach speichern):
;backlog script>yval=Zählerstand-Bezug; script>yval2=Zählerstand-Einspeisung
; (d) Um später fehlende oder falsche Werte in den Tabellen zu ändern, können folgende Befehle in der Console eingegeben werden:
;script?var       beliebige Variable auslesen z.B. script?dcon[1] (erster Tag in Monatstabelle lesen)
;script>var=1     beliebige Variable schreiben z.B. script >dcon[1]=10 (erster Tag in Monatstabelle = 10 kWh)
; (e) Um eure Diagrammdaten zu exportieren/sichern könnt ihr folgendes hintereinander eingeben. Die ausgegebenen Daten einfach markieren und in eine Textdatei kopieren:
;script?dval   script?dval2   script?dcon   script?dprod   script?mval   script?mval2   script?mcon   script?yval   script?yval2
; Zum Importieren müssen sie dann mit z.B. script>dcon={x x x x ...} eingeben werden. Am Ende speichern.


; -- ARRAYS --
; 24h power chart
M:p:sday=0 288
; Tagesnetzbezug Tabelle 1-31
M:p:dcon=0 31
; Tagesnetzeinspeisung Tabelle 1-31
M:p:dprod=0 31
; Monatsverbrauch Tabelle 1-12, Einspeisung 13-24
M:p:mcon=0 24
; 4h Chart, Neuer Wert alle 30s
M:s4h=0 481
; -- VARS --
; PermVars (max:1536bytes=384vars): Tages, Monats, Jahres Verbrauch / Einspeisung
p:mval=0
p:dval=0
p:mval2=0
p:dval2=0
p:yval=0
p:yval2=0
p:da=1
;p:vn=12000   optional um per Slider Y-Achse Werte zu begrenzen
t:t1=3
t:t2=30
t:t3=60
tmp=0
m5=0
cstr="cnt0/12"
cstr2="cnth0/120"
utm="00d 00h 00m"
avgv=0
avgv2=0
avgvc=0
avgvc2=0
hr=0
swesp=0
swespflg=0
power2=0
save=0
;-- SHELLY EMULATION --
res=0
c1p=0
c2p=0
c3p=0
c1c=0
c2c=0
c3c=0
cpwr=0
str=""
tstr=""
mstr1=""
mstr2=""
header=""
once=0
throttle=1


; -- BOOT --
>B
=>sensor53 r
tmp=is(0 "Jan|Feb|Mär|Apr|Mai|Jun|Jul|Aug|Sep|Okt|Nov|Dez|")
;Deaktiviere MQTT beim Start, verhindert das falsche Werte gesendet werden
smlj=0
header="{\"id\":0,\"src\":\"shellypro3em-"+maca+"\",\"result\":"


; -- SUBS --
#init
dval=sml[2]
dval2=sml[3]
for tmp 1 dcon[-1] 1
	dcon[tmp]=0
	dprod[tmp]=0
next
mval=sml[2]
mval2=sml[3]
for tmp 1 mcon[-1] 1
	mcon[tmp]=0
next
yval=sml[2]
yval2=sml[3]
for tmp 1 sday[-1] 1
	sday[tmp]=0
next
->Backlog2 otaurl KEIN OTA UPGRADE VIA WEBSERVER!
->Backlog2 Timezone 99;TimeStd 0,0,10,1,3,60;TimeDst 0,0,3,1,2,120
svars

; Tagesverbrauch Tabelle
#daysub
if wm>0 {
wcs <div id="day" style="text-align:center;width:600px;height:400px"></div>
wcs <script language="JavaScript">function drawChart(){
wcs var cssc={'headerRow':'hRow','rowNumberCell':'hCol','tableCell':'tCell'};
wcs var data=google.visualization.arrayToDataTable([['Tag','Energie [kWh]',{role: 'style'}],
for tmp 1 dcon[-1] 1
	if (tmp==day) {
		wcs [%tmp%,%dcon[tmp]%,'red'],
	}
	if (tmp<day) {
		wcs [%tmp%,%dcon[tmp]%,'green'],
	}
	if (tmp>day) {
		wcs [%tmp%,%dcon[tmp]%,''],
	}
next
wcs ]);
wcs var options={chartArea:{left:40,right:30,height:'75%%'},legend:'none',title:'Tagesverbräuche (Monat %is[month]%)',vAxis:{format:'# kWh'},hAxis:{title:'Tag',ticks:[1,5,10,15,20,25,30]}};
wcs var chart=new google.visualization.ColumnChart(document.getElementById('day'));
wcs chart.draw(data,options);}google.charts.setOnLoadCallback(drawChart);</script>
}

; Tageseinspeisung PV Tabelle
#dayprod
if wm>0 {
wcs <div id="dayp" style="text-align:center;width:600px;height:400px"></div>
wcs <script language="JavaScript">function drawChart(){
wcs var cssc={'headerRow':'hRow','rowNumberCell':'hCol','tableCell':'tCell'};
wcs var data=google.visualization.arrayToDataTable([['Tag','Energie [kWh]',{role: 'style'}],
for tmp 1 dprod[-1] 1
	if (tmp==day) {
		wcs [%tmp%,%dprod[tmp]%,'red'],
	}
	if (tmp<day) {
		wcs [%tmp%,%dprod[tmp]%,'green'],
	}
	if (tmp>day) {
		wcs [%tmp%,%dprod[tmp]%,''],
	}
next
wcs ]);
wcs var options={chartArea:{left:40,right:30,height:'75%%'},legend:'none',title:'Tageseinspeisung (Monat %is[month]%)',vAxis:{format:'# kWh'},hAxis:{title:'Tag',ticks:[1,5,10,15,20,25,30]}};
wcs var chart=new google.visualization.ColumnChart(document.getElementById('dayp'));
wcs chart.draw(data,options);}google.charts.setOnLoadCallback(drawChart);</script>
}

; Netzverbrauch und Einspeisung Monat Tabelle
#monthsub
if wm>0 {
wcs <div id="month" style="text-align:center;width:600px;height:400px"></div>
wcs <script language="JavaScript">function drawChart(){
wcs var cssc={'headerRow':'hRow','rowNumberCell':'hCol','tableCell':'tCell'};
wcs var data=google.visualization.arrayToDataTable([['Monat','Verbrauch [kWh]','Einspeisung[kWh]'],
for tmp 1 12 1
	if (tmp<month) {
		wcs ['%is[tmp]%',%mcon[tmp]%,%mcon[tmp+12]%],
	}
	if (tmp==month) {
		wcs ['%is[tmp]%',%mcon[tmp]%,%mcon[tmp+12]%],
	}
	if (tmp>month) {
		wcs ['%is[tmp]%',%mcon[tmp]%,%mcon[tmp+12]%],
	}
next
wcs ]);
wcs var options={series:{0:{targetAxisIndex:0},1:{targetAxisIndex:1}},chartArea:{left:40,right:40,height:'75%%'},legend:'none',title:'Verbräuche / Einspeisungen (Jahr %0(year-1)%/%0year%)',vAxes:{0:{format:'# kWh'},1:{format:'# kWh'}}};
wcs var chart=new google.visualization.ColumnChart(document.getElementById('month'));
wcs chart.draw(data,options);}google.charts.setOnLoadCallback(drawChart);</script>
}

;-- SHELLY EMULATION --
#getstat
;B2500 benötigt unbedingt 2 Dezimalstellen
dp(0 2)
mstr1="{\"id\":0,\"a_current\":"+s(c1c)+",\"a_voltage\":230,\"a_act_power\":"+s(c1p)+",\"a_aprt_power\":"+s(c1p)+",\"a_pf\":1,\"a_freq\":50,"
mstr1+="\"b_current\":"+s(c2c)+",\"b_voltage\":230,\"b_act_power\":"+s(c2p)+",\"b_aprt_power\":"+s(c2p)+",\"b_pf\":1,\"b_freq\":50,"
mstr2="\"c_current\":"+s(c3c)+",\"c_voltage\":230,\"c_act_power\":"+s(c3p)+",\"c_aprt_power\":"+s(c3p)+",\"c_pf\":1,\"c_freq\":50,"
mstr2+="\"total_current\":"+s(c1c+c2c+c3c)+",\"total_act_power\":"+s(cpwr)+",\"total_aprt_power\":"+s(cpwr)+"}}"


; -- JEDE SEKUNDE --
>S
; Daten sofort speichern Button
if (save==1) {
	save=0
	svars
}
; Warte auf NTP und Zähler
if ((year<2020) or (sml[2]==0)) {
	print auf NTP/Zähler warten
	break
}
; Starte MQTT erst wenn Daten vom Stromzähler kommen
smlj=1

; alle 3s
if (t1==0) {
	t1=3
	; Leistung aufsummieren 4h/24h Diagramm
	avgv+=sml[1]
	avgv2+=sml[1]
	avgvc+=1
	avgvc2+=1
	; Optional: gemittelte Leistung für z.B. opendtu-onbattery DPL: http://192.168.178.31/cm?user=admin&password=joke&cmnd=script?power2
	power2=(0.9*power2)+((1-0.9)*sml[1])
	;=>publish stat/%topic%/script/power2 %power2%

	; (Op1) Schalte anderen ESP bei Netzeinspeisung. Schaue in die >W Sektion.
	if (swesp==1) {
		if ((power2<-300) and (swespflg==0)) {
			;->websend [192.168.0.50] power ON
			;print power ON %power2%W
			swespflg=1
		}
		if ((power2>100) and (swespflg==1)) {
			;->websend [192.168.0.50] power OFF
			;print power OFF %power2%W
			swespflg=0
		}
	}
	; (Op2) Siehe https://ottelo.jimdofree.com/stromz%C3%A4hler-auslesen-tasmota/#8
	;->WebQuery EURE-PUSH-API-URL POST [Content-Type:application/json] {"watt": %0sml[1]%}
}

; alle 30s
if (t2==0) {
	t2=30
	; 4h chart. idx wird automatisch gesetzt
	s4h=avgv/avgvc
	avgv=0
	avgvc=0

	; Setze 4h Chart X-Achse alle 30s => /120 Werte pro Stunde. Arraygrösse = 480
	; tasmota calc [hh:mm] via cnthX/Y. mm = X%Y * 60/Y. hh = X/Y
	cstr2="cnth"+s(1.0((((hours+20)*120)+(mins*2)+(int(secs/30)))%2880+1))+"/120"
}

; alle 60s
if (t3==0) {
	t3=60
	hr=hours
	;Zeit seit letztem Boot
	utm=s(2.0(int(uptime/1440)))+"d "+s(2.0(int(uptime/60)%24))+"h "+s(2.0(uptime%60))+"m"

	; Tagesverbrauch [kWh]
	dcon[day]=sml[2]-dval
	; Monatsverbrauch [kWh]
	mcon[month]=sml[2]-mval
	; Tageseinspeisung [kWh]
	dprod[day]=sml[3]-dval2
	; Monatseinspeisung [kWh]
	mcon[month+12]=sml[3]-mval2
	
	;=>publish stat/%topic%/script/consday %2(dcon[day])%
	;=>publish stat/%topic%/script/yieldday %2(dprod[day])%
	;=>publish stat/%topic%/script/consmonth %2(mcon[month])%
	;=>publish stat/%topic%/script/yieldmonth %2(mcon[month+12])%
	;=>publish stat/%topic%/script/consyear %2(sml[2]-yval)%
	;=>publish stat/%topic%/script/yielyear %2(sml[3]-yval2)%

	; 24h Chart. Berechne Durschnittsleistung [W] der letzten 5min => ins Array[1-288]
	m5=int((((hours*60)+mins)/5)+1)
	; set idx (pointer starts from 0)
	sday[0]=m5
	if (chg[m5]>0) {
		sday[m5]=int(avgv2/avgvc2)
		avgv2=0
		avgvc2=0
	}

	; Aktualisiere 24h Chart alle 5Min => Arraygröße 288
	; tasmota calc [hh:mm] via cnthX/Y. mm = X%Y * 60/Y. hh = X/Y
	cstr="cnth"+s(1.0(((hours)*12)+int(mins/5))+1)+"/12"

	; Tagesverbrauch & Einspeisung Berechnung um Mitternacht
	if ((chg[hr]>0) and (hr==0)) {
		if (day>1) {
			da=day
		} else {
		    ; Monatswechsel
			for tmp (da+1) 31 1
				dcon[tmp]=0
				dprod[tmp]=0
			next
			; monthly values
			mval=sml[2]
			mval2=sml[3]
		}
		if (day*month==1) {
			; Jahreswechsel
			yval=sml[2]
			yval2=sml[3]
		}
		; daily values
		dval=sml[2]
		dval2=sml[3]
		; nur 1x um Mitternacht speichern
		svars
	}
}

;-- SHELLY EMULATION --
if (once==0) {
	; starte mDNS damit Marstek den emulierten Shelly findet
	res=mdns("shellypro3em-" "-" "shelly")
	; start UDP für Datenkommunikation
	; Port 1010 oder ggf. 2220 für B2500
	res=udp(0 1010)
	once=1
}

; Marstek Abfrage verzögern, throttle=1 => sekündlich senden
if (upsecs%throttle!=0) {
break;
}

; Standard: Zähler übermittelt nur Gesamtleistung
; Peaks reduzieren, verbessert Regelung
tmp=sml[1]-cpwr
if (tmp>500) {
	cpwr=sml[1]-(tmp/2)
} else {
	; reduziere die Leistung um 50W, damit die Regelung nicht um 0W, sondern um 50W herum schwingt. Nur sinvoll, wenn PV-Panels direkt am Akku hängen.
	;cpwr=sml[1]-50
	cpwr=sml[1]
}

; Standard: Zähler sendet nur Gesamtleistung
c1p=cpwr
; Optional: Wenn Zähler auch Einzelleistungen sendet (L1-3). Marstek prüft dann, auf welcher Phase er verbunden ist. ; entfernen um zu verwenden.
;c1p=sml[4]
;c2p=sml[5]
;c3p=sml[6]
; Ströme berechnen
c1c=c1p/230
;c2c=c2p/230
;c3c=c3p/230

; UDP Anfrage bearbeiten
str=udp(1)
if (str!="") {
	;print udp rpc payload=%str%
	res=ins(str "EM.GetStatus")
	if (res>=0) {
		=#getstat
		udp(2 header mstr1 mstr2)
		break
	}
} else {
	; Optional: Sende auch, wenn Marstek nicht anfragt, verbessert Marstek Regelung
	;=#getstat
	;udp(2 header mstr1 mstr2)
}


; WEB INTERFACE
>W
; Auto reload
;$<script> setTimeout("location.reload(true);",5000); </script>

;Tasmota Buttons ausblenden. Um an die Menüs zu kommen z.B. http://tasmota-ip/mn? eingeben
;<style>form button{display:none}</style>

; web button
bu(save "gespeichert!" "Daten sofort speichern")
; (Op1) Schalte anderen ESP bei Netzeinspeisung. Schaue in die >S Sektion.
;bu(swesp "PV Steckdose aktivieren" "PV Steckdose deaktivieren")
; optional um per Slider Y-Achse Werte zu begrenzen, suche im Skript nach vn
;sl(4000 20000 vn "4 kW" "12 kW" "20 kW")

; Filtered power
Leistung (gefiltert){m}%0power2% W
Leistung (an Marstek Akku){m}%0cpwr% W

; Verbrauch
Tagesverbrauch{m}%2(sml[2]-dval)% kWh
Monatsverbrauch{m}%2(sml[2]-mval)% kWh
Jahresverbrauch{m}%2(sml[2]-yval)% kWh

; Einspeisung (PV)
Tageseinspeisung{m}%2(sml[3]-dval2)% kWh
Monatseinspeisung{m}%2(sml[3]-mval2)% kWh
Jahreseinspeisung{m}%2(sml[3]-yval2)% kWh

; Zeit
Datum{m}%s(2.0day)%.%s(2.0month)%.%s(2.0year)% - %s(2.0hours)%:%s(2.0mins)%:%s(2.0secs)%
Uptime{m}%utm%
$<div style="margin-left:-30px">

; 4h Leistung Diagramm
$<div id="chart1" style="text-align:center;width:600px;height:400px"></div>
$gc(lt s4h "wr" "Leistung [W]" cstr2)
$var options = {
$chartArea:{left:60,right:20,height:'75%%'},
$legend:'none',
;$vAxis:{format:'# W',viewWindow:{max:%vn%}},   optional um per Slider Y-Achse Werte zu begrenzen, suche im Skript nach vn
;$vAxis:{format:'# W',viewWindow:{max:5000}},   optional um Y-Achse Werte auf 5kW zu begrenzen
$vAxis:{format:'# W'},
$hAxis:{slantedTextAngle:45},
$explorer:{actions:['dragToZoom','rightClickToReset']},
$series: {0: {type: 'area'}},
$title:'Leistung 4 Stunden [Watt]'
$};
$gc(e)

; 24h Leistung Diagramm
$<div id="chart2" style="text-align:center;width:600px;height:400px"></div>
$gc(lt sday "wr" "Leistung [W]" cstr)
$var options = {
$chartArea:{left:60,right:20,height:'75%%'},
$legend:'none',
;$vAxis:{format:'# W',viewWindow:{max:%vn%}},   optional um per Slider Y-Achse Werte zu begrenzen, suche im Skript nach vn
;$vAxis:{format:'# W',viewWindow:{max:5000}},   optional um Y-Achse Werte auf 5kW zu begrenzen
$vAxis:{format:'# W'},
$hAxis:{slantedTextAngle:45},
$explorer:{actions:['dragToZoom', 'rightClickToReset']},
$series: {0: {type: 'area'}},
$title:'Leistung 24 Stunden [Watt]'
$};
$gc(e)

; Einfacher Säulenchart mit 2 Reihen
;$<div id="chart3" style="text-align:center;width:600px;height:400px"></div>
;$gc(c dprod "wr" "kWh" "cnt1" "Tägliche Einspeisung")

; Tagesverbrauch und Einspeisung Tabelle
%=#daysub
%=#dayprod

; Netzverbrauch und Einspeisung Monat Tabelle
%=#monthsub

$<center><span style="font-size:10px;">
$Version 02.10.2025 (PV+ShellyEmu) by ottelo.jimdo.de<br>
$Credits to gemu2015 (Tasmota Script Dev)<br>
$Hinweis: Die Daten (ohne 4h Chart) werden um Mitternacht gespeichert!<br>
$Der Restart Button speichert ebenfalls die Daten.<br>
$</span></center></div>


;-- SML --
; SML Sektion an euren Stromzähler anpassen
;1=meter1 5=GPIO5 s=SML 0=filterOff 16=filterOn 9600=baud MT175=Name 4=TX-GPIO
; Anleitung: https://ottelo.jimdofree.com/stromz%C3%A4hler-auslesen-tasmota/#4c
; Reihenfolge nicht ändern: 1=(Gesamt)Leistung sml[1] 2=Verbrauch sml[2] 3=Einspeisung sml[3]
; Medianfilter <flag> = 16 nicht verwenden, verbessert Marstek Regelung
; https://tasmota.github.io/docs/Smart-Meter-Interface/#meter-definition
>M 1
; Beispiel MT175 mit bitShake SmartMeterReader-Air
+1,5,s,0,9600,MT175,4
1,77070100100700ff@1,Leistung,W,Power_curr,0
1,77070100010800ff@1000,Verbrauch,KWh,Total_in,2
1,77070100020800ff@1000,Einspeisung,KWh,Total_out,2
;optional - Falls die Leistung aller 3 Phasen ausgegeben wird, optional relevant für Shelly Emulation sml[4],[5],[6]
;1,77070100240700ff@1,L1,W,L1,0
;1,77070100380700ff@1,L2,W,L2,0
;1,770701004C0700ff@1,L3,W,L3,0
#